#include
In PHP, include() is a built in function. What it does is, when another PHP file is included in a PHP file, then the system first runs the included php file then the system runs the file where the previous file is included.

#require
In PHP, require() is another built in function which does the same thing as include() but the major difference is, when a file is included, if that file is not found or not exist, rest of the code will get executed but when a file is added by using require() function, if that file does not exist or can not be found, rest of the code will not get executed at all.

#GET and POST method
1. GET method -> This method sends data to the address bar/URL and it can be visible.
2. POST method -> This method also sends data to the server but it is secure and data are not visible in the address bar.

#action="" in the form
At the time when data is being sent by pressing the submit button, this thing decides what file is going to handle the sent data. It decides what file should be run and process the data. A php file name is mentioned here and when data goes to the database, after posting the data, system searches for that file whose name is mentioned in the action and execute the codeblocks of php inside that file. There can be time when submit button is pressed without any data or the page is refreshed or something else like data did not go to the database for connection failure or any other reason. At that time what the system will do, these instructions are mentioned in that php file and that is why the name of that php file is mentioned in the action.

#isset() function
What this function do is, it checks if any certain variable/value/form field is set. It checks if any data is being sent through the GET/POST method.

#$_GET[] / $_POST[]
These two are two global arrays in PHP. All the data which are going to be sent to the database, are going to be stored in this array on the server It is an associative array. When the submit button is clicked and isset function checks for it if the submit value is set or not, if the value is set then this array stores all the data inside it.

#CROSS SITE SCRIPTING(XSS)
Its a security issue. Sometimes people can inject another sites address in the form fields and after submitting the submit button, system takes the user to that website where malicious virus can be downloaded or any other things can happen. To do that, a person writes javascrpit codes in the form field with the address of that specific website. To prevent it, htmlspecialchars() function is used. To cross site script:
										
										<script>window.location="http://www.facebook.com"</script>

#htmlspecialchars()
This function prevents the risk of cross site scripting. What it does is, it converts any special characters like equals(=), at the rate sign(@) etc to html entities and then the address which was provided by the person who wants to the cross site scripting, becomes just a text line or sentence and does not work anymore as the address of that specific website.

#empty()
This function checks if the form fields are empty or not after hitting the submit button.

#filter_var()
This function validates email and other things which can be validated. Point to be noted that, it can not validate all things like title or other words that does not follow a pattern like email and other things able to be validated. This function takes two parameters. One is the variable which contains the value which will be validated and the other one is the validation format(As example: To validate email the format is FILTER_VALIDATE_EMAIL)

#Regular Expression(Regex)
This thing is used to validate the things which does not follow a format like email and other things. As example, a title or a name actually does not have a format. A name can be anything but the thing is a name must not have special characters or numbers. Same goes for the title. So regex helps to validate the things like name, title. It sets up some conditions where the variable which contains the name/title can only pass if they contains a-z or A-Z.

#array_filter()
This function checks for errors in the array. Before submitting the form of user's data, the last check is done by this function. This function returns false if there is no error inside the array and if there is an error or a number of errors, it returns true.

#header('Location: ....')
This function redirects the user to a specific location which is determined inside this function.

#mysqli_connect()
This function connects codes to the database. It takes four parameters. They are: localhost, username, password, dbname

#mysqli_connect_error()
This function returns the type of error occured during the creation of db connection.

#mysqli_query()
To run the sql query, this function is used in PHP. It takes two parameters. One is the connection variable which creates the connection and the other one is the variable which contains sql query(NOTE: sql query must have to be inside a variable)

#mysqli_fetch_all()
Whatever has been returned from the database, this function collects it all and turns it into an associative array. This also takes two parameters. One is the variable name which contains all the returned results from the database (for this project it is $result) and the other one is a keyword (MYSQLI_ASSOC) which turns the returned results to an associative array.

#mysqli_free_result()
This function frees a variable from saved data. When the job is done, we don't need the data anymore. So this function get rid of the data which is stored in a variable. This function takes one parameter and it is the variable name where the data is saved.

#mysqli_close()
This function close the connection to the database. It is used when the data is fetched from the database and no connection is needed anymore with the db. It takes one parameter and it is the variable name where the connection to the db is created.

#explode()
In the tutorial of this project(https://www.youtube.com/watch?v=wT5CVoOdLlE&list=PL4cUxeGkcC9gksOX3Kd9KPo-O68ncT05o&index=28), there are comma separated ingredients for pizza. So, this function is used to take the ingredients names, store them in an array and print it as a list. This function takes two parameters. One is the special character by which each index or each data is seperated (in this case this is a ',' sign) and the other one is the array or variable where the data is saved (in this case, its $pizza[0]['ingredients'])

#mysqli_real_escape_string()
It's task is same as htmlspecialchars() but the only difference is, it is used so that user can't push any malicious data into the database. It prevents any special characters other than normal texts and sends it to the db. It takes two parameters. First one is connection variable where the db connection is made and the second one is the value which is going to be posted in the db.

#mysqli_fetch_assoc
This function is used to fetch one single data from db and turn it into an associative array.

#mysqli_num_rows()
This function counts the number of rows present inside the database.

#To print msg in a alert box
echo '<script>alert("Invalid Email or Password!")</script>';

#Ternary Operators
Turns the if else block into one single line code block. Exmp: 
$score = 46;
echo $score >25 ? 'high score' : 'low score';

#SuperGlobals
$_SERVER['SERVER_NAME'] -> returns the name of the server
$_SERVER['REQUEST_METHOD'] -> The method used to get this certain PHP page.
$_SERVER['SCRIPT_FILENAME'] -> The full/whole path of this certain PHP file.
$_SERVER['PHP_SELF'] -> path of this current PHP file.

IMPORTANT SuperGlobals
Sessions()
After starting a session, this session will last until we close the browser.
To start a session -> session_start()
To access the different properties stored in the session variable: $_SESSION['property_name];

Cookies()
To set a cookie, this function is used: setcookie('gender', $_POST['gender], time() + 86400);


#Difference between sessions and cookies
Sessions get stored in the server, but cookies get stored in the users computer.

#FileSystem
readfile('filename.type')
This function prints the file content on the browser and at the last part it prints the byte of data it contains.

file_exists()
This function checks for the file if it exist or not.

copy()
This function copies the file. This function takes two parameters. One is the variable name which contains the file and the other one is the file name which we want to copy it into. Exmp: copy($file, 'quotes.txt');

realpath()
To get the path of the file, this function is used.

filesize()
Reveal the file size.

rename()
To rename the file, this function is used. Takes two parameters: variable and the name what we change into.

mkdir()
This means make directory. To make a directory, this function is used. Takes the directory name as parameter and creats a directory/new_folder.

fopen()
This function is used to open a file. This function takes two arguments. One is the variable which contains the file and the other one is 'r' for reading the file.

fread()
This function is used to read from the file. Exmp: 
$handle = fopen($file, 'r');
fread($handle, filesize($file));

To read certain amount of byte from the file:
echo fread($handle, 112);

To read a single line from the file  --> is a pointer
echo fgets($handle)

To read single characters
echo fgetc($handle)

To write in a file
$handle = fopen($file, 'r+');
fwrite($handle, "\nWhatever we want to write");

$handle = fopen($file, 'a+');
This place the pointer at the end of the file.

To close aa file:
fclose($handle);

To delete a file:
unlink($file);

is_string()
checks if the input is a string or not.